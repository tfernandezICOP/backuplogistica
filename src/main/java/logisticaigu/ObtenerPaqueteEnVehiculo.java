/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logisticaigu;

import Controladoras.ControladoraPaquete;
import Controladoras.ControladoraViaje;
import Controladoras.ControladoraViajePaquete;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import logisticalogica.Paquete;
import logisticalogica.Vehiculo;
import logisticalogica.Viaje;
import logisticalogica.ViajePaquete;
import logisticapersistencia.ControladoraPersistencia;

/**
 *
 * @author ULTRA
 */
public class ObtenerPaqueteEnVehiculo extends javax.swing.JFrame {

    /**
     * Creates new form ObtenerPaqueteEnVehiculo
     */
    ControladoraPaquete ctrlPaquete = new ControladoraPaquete();
    private int idViaje;
        private int vehiculoId;
private int contadorEnCamino = 0;
private int contadorDevuelto = 0;
        private Vehiculo vehiculoSeleccionado; // Add this line
String modelo;
    String patente;
     private DefaultListModel<String> listModel = new DefaultListModel<>();
     private String rolUsuario;
    public ObtenerPaqueteEnVehiculo(int vehiculoId ,String modelo,String patente,int idViaje, String rolUsuario) {
        initComponents();
         this.vehiculoId = vehiculoId;
         this.patente = patente;
         this.modelo = modelo;
        this.rolUsuario = rolUsuario;
        this.idViaje = idViaje;
        this.vehiculoSeleccionado = vehiculoSeleccionado; // Add this line

        
        cargarListaPaquetes();
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting() && jTable1.getSelectedRowCount() > 0) {
                    jButton2.setEnabled(true);
                } else {
                    jButton2.setEnabled(false);
                }
            }
        });
        
        
        jButton2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton2.setText("Guardar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 835, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jButton2)
                            .addGap(100, 100, 100)
                            .addComponent(jButton1))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1888, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     int[] selectedRows = jTable1.getSelectedRows();

    if (selectedRows.length == 0) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione al menos un paquete.", "Alerta", JOptionPane.WARNING_MESSAGE);
        return;
    }

    for (int selectedRow : selectedRows) {
        Integer codigoPaquete = (Integer) jTable1.getValueAt(selectedRow, 0);

        String estadoPaquete = obtenerEstadoPaquete(codigoPaquete);

        if ("EN CAMINO".equals(estadoPaquete)) {
            JOptionPane.showMessageDialog(this, "El paquete seleccionado ya está en camino y no se puede asociar al viaje.", "Alerta", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }

    Object[] options = {"EN CAMINO", "Devuelto"};
    int choice = JOptionPane.showOptionDialog(
        this,
        "Seleccione a qué estado cambiará el paquete:",
        "Cambiar Estado de Paquete",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]
    );

    String nuevoEstado = "";
    if (choice == JOptionPane.YES_OPTION) {
        nuevoEstado = "EN CAMINO";
        contadorEnCamino++; // Incrementar contador si se elige "EN CAMINO"
    } else if (choice == JOptionPane.NO_OPTION) {
        nuevoEstado = "Devuelto";
        contadorDevuelto++; // Incrementar contador si se elige "Devuelto"
    } else {
        return; // Si el usuario cierra el diálogo sin seleccionar una opción
    }

    for (int selectedRow : selectedRows) {
        Integer codigoPaquete = (Integer) jTable1.getValueAt(selectedRow, 0);

        // Resto del código para asociar el paquete al viaje y actualizar su estado
        ViajePaquete viajePaquete = new ViajePaquete();

        ControladoraPersistencia controladoraPersistencia = new ControladoraPersistencia();
        Paquete paquete = controladoraPersistencia.obtenerPaquetePorCodigo(codigoPaquete);

        ControladoraViaje controladoraViaje = new ControladoraViaje();
        Viaje viaje = controladoraViaje.obtenerViajePorId(idViaje);

        viajePaquete.setPaquete(paquete);
        viajePaquete.setViaje(viaje);
        ControladoraViajePaquete ctrlViajePaquete = new ControladoraViajePaquete();
        ctrlViajePaquete.crearviajepaquete(viajePaquete);

        paquete.setEstado(nuevoEstado);
        ctrlPaquete.actualizarEstadoPaquete(paquete);

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRow);
    }

    // Preguntar si desea seguir asociando paquetes
    int confirmacion = JOptionPane.showConfirmDialog(
        this,
        "¿Desea seguir asociando paquetes a este vehículo?",
        "Confirmar",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmacion == JOptionPane.NO_OPTION) {
        new Viajes(rolUsuario).setVisible(true);
        dispose();
    } else {
        cargarListaPaquetes();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.fireTableDataChanged();
    }

    // Imprimir contadores en consola
    System.out.println("Veces guardado como EN CAMINO: " + contadorEnCamino);
    System.out.println("Veces guardado como Devuelto: " + contadorDevuelto);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ViajesPaqueteEncamino atras = new ViajesPaqueteEncamino(vehiculoId,modelo, patente, rolUsuario);
        atras.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

 private void cargarListaPaquetes() {
    List<Paquete> paquetesPlanificados = ctrlPaquete.filtrarPaquetesPorEstado("PLANIFICADO");

    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("Código Paquete");
    modelo.addColumn("Descripción");
    modelo.addColumn("Estado");
    modelo.addColumn("Domicilio de Retiro");
    modelo.addColumn("Domicilio de Entrega");
    modelo.addColumn("Fecha Recibido");
    modelo.addColumn("Fecha Entrega");
    modelo.addColumn("Provincia Origen");
    modelo.addColumn("Localidad Origen");
    modelo.addColumn("Provincia Destino");
    modelo.addColumn("Localidad Destino");
    modelo.addColumn("Emisor");
    modelo.addColumn("Receptor");

    jTable1.setModel(modelo);

    for (Paquete paquete : paquetesPlanificados) {
        String nombreApellidoEmisor = paquete.getEmisor() != null ? paquete.getEmisor().getNombre() + " " + paquete.getEmisor().getApellido() : "";
        String nombreApellidoReceptor = paquete.getReceptor() != null ? paquete.getReceptor().getNombre() + " " + paquete.getReceptor().getApellido() : "";

        Object[] fila = new Object[]{
            paquete.getCodigo_paquete(),
            paquete.getDescripcion(),
            paquete.getEstado(),
            paquete.getDomicilioRetiro(),
            paquete.getDomicilioEntrega(),
            paquete.getFechaRecibido(),
            paquete.getFechaEntrega(),
            paquete.getOrigen().getNombre(),
            paquete.getLocalidadOrigen().getNombre(),
            paquete.getDestino().getNombre(),
            paquete.getLocalidadDestino().getNombre(),
            nombreApellidoEmisor,
            nombreApellidoReceptor
        };

        modelo.addRow(fila);
    }
}


    /**
     * @param args the command line arguments
     */
    private String obtenerEstadoPaquete(int codigoPaquete) {
    List<Paquete> paquetes = ctrlPaquete.filtrarPaquetesPorCodigo(codigoPaquete);
    
    if (!paquetes.isEmpty()) {
        return paquetes.get(0).getEstado(); 
    } else {
        return ""; 
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
