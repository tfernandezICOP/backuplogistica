/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logisticaigu;

import Controladoras.ControladoraDetalleMante;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logisticalogica.DetalleMantenimiento;
import logisticalogica.Mantenimiento;
import logisticalogica.MantenimientoRealizado;
import logisticalogica.Vehiculo;


/**
 *
 * @author ULTRA
 */
public class TipoMantenimiento extends javax.swing.JFrame {
 private List<DetalleMantenimiento> detallemante;
    private DetalleMantenimiento tipoMantenimientoSeleccionado;
    private MantenimientoRealizado mantenimientoRealizado;
    private String rolUsuario;
    /**
     * Creates new form TipoMantenimiento
     */
    public TipoMantenimiento(MantenimientoRealizado mantenimientoRealizado, String rolUsuario) {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH); // Abre el JFrame en pantalla completa
        this.mantenimientoRealizado = mantenimientoRealizado; // Asigna el valor recibido al atributo de la clase
        this.rolUsuario = rolUsuario;
        
        // Crear un renderizador personalizado para los encabezados de las columnas
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER); // Alinear al centro horizontalmente
        headerRenderer.setVerticalAlignment(SwingConstants.CENTER); // Centrar verticalmente
        headerRenderer.setFont(new Font("Arial", Font.PLAIN, 18)); // Establecer la fuente a Arial 18
        
        // Aplicar el renderizador personalizado a los encabezados de las columnas
        jTable1.getTableHeader().setDefaultRenderer(headerRenderer);

        ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
        // Obtener todos los detalles de mantenimiento
        detallemante = controladoraDetalleMante.obtenerDetallesMantenimiento();

        // Actualizar la tabla con los detalles de mantenimiento obtenidos
        actualizarTabla();               

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
         jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!jTable1.getSelectionModel().isSelectionEmpty()) {
                jButton2.setEnabled(true);
            } else {
                jButton2.setEnabled(false);
            }
        }
    });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tipo de Mantenimiento");

        jButton1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton2.setText("Guardar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Lista de servicios"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton3.setText("Agregar servicio");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 818, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(100, 100, 100)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Obtener el tipo de servicio seleccionado en la tabla
    int filaSeleccionada = jTable1.getSelectedRow();
    if (filaSeleccionada != -1) {
        String tipoServicioSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);

        // Buscar el detalle de mantenimiento correspondiente al tipo de servicio seleccionado en la tabla
        DetalleMantenimiento detalleSeleccionado = null;
        for (DetalleMantenimiento detalle : detallemante) {
            if (detalle.getTipoServicio().equals(tipoServicioSeleccionado)) {
                detalleSeleccionado = detalle;
                break;
            }
        }

        if (detalleSeleccionado != null) {
            // Mostrar un mensaje de confirmación para asegurar que el usuario quiere seleccionar este tipo de servicio
            // Crear el mensaje con el tipo de servicio
            String mensaje = "¿Estás seguro de seleccionar el tipo de servicio: " + detalleSeleccionado.getTipoServicio() + "?";

            // Crear un JLabel para personalizar el mensaje y establecer la fuente
            JLabel selectipservicio = new JLabel(mensaje);
            selectipservicio.setFont(new Font("Arial", Font.PLAIN, 18));

            // Crear un array de objetos para personalizar los botones del JOptionPane
            Object[] options = {"Si", "No"};

            // Mostrar el cuadro de diálogo de confirmación con el JLabel personalizado y las opciones de botones modificadas
            int opcionConfirmacion = JOptionPane.showOptionDialog(this, selectipservicio, "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
            
            if (opcionConfirmacion == JOptionPane.YES_OPTION) {
                // Crear un nuevo detalle de mantenimiento
                DetalleMantenimiento nuevoDetalleMantenimiento = new DetalleMantenimiento();

                // Asignar el tipo de servicio del detalle seleccionado al nuevo detalle
                nuevoDetalleMantenimiento.setTipoServicio(detalleSeleccionado.getTipoServicio());

                // Asignar el mantenimiento realizado al nuevo detalle
                nuevoDetalleMantenimiento.setMantenimientoRealizado(this.mantenimientoRealizado); // Utiliza el mantenimientoRealizado actual

                // Guardar el nuevo detalle de mantenimiento en la base de datos
                ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
                controladoraDetalleMante.guardarTipoMantenimiento(nuevoDetalleMantenimiento);

                // Mostrar un mensaje de éxito
                // Crear un JLabel para personalizar el mensaje
                JLabel manteasociado = new JLabel("Detalle de mantenimiento asociado exitosamente");
                // Establecer la fuente del JLabel
                manteasociado.setFont(new Font("Arial", Font.PLAIN, 18));

                // Mostrar el cuadro de diálogo de información con el JLabel personalizado
                JOptionPane.showMessageDialog(this, manteasociado);

                // Crear un JLabel para personalizar el mensaje
                JLabel agregarservi = new JLabel("¿Desea agregar otro tipo de servicio?");
                // Establecer la fuente del JLabel
                agregarservi.setFont(new Font("Arial", Font.PLAIN, 18));
                
                // Crear un array de objetos para personalizar los botones del JOptionPane
                //Object[] options = {"Si", "No"};

                // Mostrar el cuadro de diálogo de confirmación con el JLabel personalizado y las opciones de botones modificadas
                int opcion = JOptionPane.showOptionDialog(this, agregarservi, "Agregar otro tipo de servicio", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                
                if (opcion == JOptionPane.NO_OPTION) {
                    // Si elige "No", entonces mostrar el menú principal
                    Menu menu = new Menu(rolUsuario);
                    menu.setVisible(true);
                    dispose(); // Ocultar la ventana actual
                }
            } else {
                // Mostrar un mensaje indicando que la operación ha sido cancelada
                // Crear un JLabel para personalizar el mensaje
                JLabel opecancelada = new JLabel("Operación cancelada.");
                // Establecer la fuente del JLabel
                opecancelada.setFont(new Font("Arial", Font.PLAIN, 18));

                // Mostrar el cuadro de diálogo de información con el JLabel personalizado
                JOptionPane.showMessageDialog(this, opecancelada);
            }
        } else {
            // Mostrar un mensaje de error si no se encontró el detalle de mantenimiento correspondiente al tipo de servicio seleccionado
            // Crear un JLabel para personalizar el mensaje
            JLabel noencuentradetallemante = new JLabel("No se encontró el detalle de mantenimiento correspondiente al tipo de servicio seleccionado");
            // Establecer la fuente del JLabel
            noencuentradetallemante.setFont(new Font("Arial", Font.PLAIN, 18));
            // Mostrar el cuadro de diálogo de error con el JLabel personalizado y el título personalizado
            JOptionPane.showMessageDialog(this, noencuentradetallemante, "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Mostrar un mensaje de error si no se seleccionó ninguna fila en la tabla
        // Crear un JLabel para personalizar el mensaje
        JLabel detallemante = new JLabel("Por favor, seleccione un detalle de mantenimiento");
        // Establecer la fuente del JLabel
        detallemante.setFont(new Font("Arial", Font.PLAIN, 18));
        // Mostrar el cuadro de diálogo de error con el JLabel personalizado y el título personalizado
        JOptionPane.showMessageDialog(this, detallemante, "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AvisoMantenimiento atras = new AvisoMantenimiento(rolUsuario);
        atras.setVisible(true);
        dispose();
            

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         // Crear un panel que contenga los campos de entrada necesarios
        JPanel panel = new JPanel();
        panel.add(new JLabel("Tipo de Servicio:"));
        JTextField tipoServicioField = new JTextField(20);
        panel.add(tipoServicioField);

        // Mostrar el JOptionPane personalizado para ingresar el tipo de servicio
        // Crear un panel para personalizar el mensaje
        JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayout(1, 1)); // Se puede ajustar según sea necesario

        // Crear un JLabel para el mensaje y establecer la fuente
        JLabel ingreseservicio = new JLabel("Ingrese el tipo de servicio");
        ingreseservicio.setFont(new Font("Arial", Font.PLAIN, 18));

        // Agregar el JLabel al panel
        panel2.add(ingreseservicio);

        // Mostrar el cuadro de diálogo con el panel personalizado
        int result = JOptionPane.showConfirmDialog(this, panel, "Ingrese el tipo de servicio", JOptionPane.OK_CANCEL_OPTION);
        
        if (result == JOptionPane.OK_OPTION) {
            String tipoServicio = tipoServicioField.getText().trim();
            if (!tipoServicio.isEmpty()) {
                // Crear una instancia de DetalleMantenimiento con el tipo de servicio
                DetalleMantenimiento detalleMantenimiento = new DetalleMantenimiento();
                detalleMantenimiento.setTipoServicio(tipoServicio);
                detalleMantenimiento.setMantenimientoRealizado(null); // MantenimientoRealizado en null

                // Guardar el detalle de mantenimiento en la base de datos
                ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
                controladoraDetalleMante.guardarTipoMantenimiento(detalleMantenimiento);

                // Actualizar la tabla
                detallemante.add(detalleMantenimiento);
                actualizarTabla();

                // Mostrar un mensaje de éxito
                // Crear un JLabel para personalizar el mensaje
                JLabel detallemanteguardado = new JLabel("Detalle de mantenimiento guardado exitosamente");
                // Establecer la fuente del JLabel
                detallemanteguardado.setFont(new Font("Arial", Font.PLAIN, 18));
                // Mostrar el cuadro de diálogo de información con el JLabel personalizado
                JOptionPane.showMessageDialog(this, detallemanteguardado);
                                
            } else {
                // Mostrar un mensaje de error si el campo está vacío
                // Crear un JLabel para personalizar el mensaje
                JLabel tiposervicio = new JLabel("Ingrese el tipo de servicio");
                // Establecer la fuente del JLabel
                tiposervicio.setFont(new Font("Arial", Font.PLAIN, 18));
                // Mostrar el cuadro de diálogo de error con el JLabel personalizado
                JOptionPane.showMessageDialog(this, tiposervicio, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

   private void actualizarTabla() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("Tipo de Servicio");

    // Utilizar un conjunto para evitar duplicados
    Set<String> tiposServicioSet = new HashSet<>();

    for (DetalleMantenimiento detalle : detallemante) {
        // Verificar si el mantenimientoRealizado asociado al detalle es nulo y si el tipo de servicio no está ya en el conjunto
        if (detalle.getMantenimientoRealizado() == null && !tiposServicioSet.contains(detalle.getTipoServicio())) {
            Object[] fila = {detalle.getTipoServicio()};
            modelo.addRow(fila);
            tiposServicioSet.add(detalle.getTipoServicio());
        }
    }
    jTable1.setModel(modelo);
}
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
   
}