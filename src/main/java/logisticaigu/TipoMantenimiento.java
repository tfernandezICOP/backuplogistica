/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package logisticaigu;

import Controladoras.ControladoraDetalleMante;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import logisticalogica.DetalleMantenimiento;
import logisticalogica.Mantenimiento;
import logisticalogica.MantenimientoRealizado;
import logisticalogica.Vehiculo;


/**
 *
 * @author ULTRA
 */
public class TipoMantenimiento extends javax.swing.JFrame {
 private List<DetalleMantenimiento> detallemante;
    private DetalleMantenimiento tipoMantenimientoSeleccionado;
    private MantenimientoRealizado mantenimientoRealizado;
    private String rolUsuario;
    /**
     * Creates new form TipoMantenimiento
     */
    public TipoMantenimiento(MantenimientoRealizado mantenimientoRealizado, String rolUsuario) {
  initComponents();
        this.mantenimientoRealizado = mantenimientoRealizado; // Asigna el valor recibido al atributo de la clase
        this.rolUsuario = rolUsuario;
        if (mantenimientoRealizado != null) {
            JOptionPane.showMessageDialog(this, "ID del Mantenimiento Realizado: " + mantenimientoRealizado.getMantenimientoRealizadoID());
        } else {
            JOptionPane.showMessageDialog(this, "Error: Mantenimiento Realizado es nulo");
        }

        ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
        // Obtener todos los detalles de mantenimiento
        detallemante = controladoraDetalleMante.obtenerDetallesMantenimiento();

        // Actualizar la tabla con los detalles de mantenimiento obtenidos
        actualizarTabla();

        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
         jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            // Verificar si hay una fila seleccionada en la tabla
            if (!jTable1.getSelectionModel().isSelectionEmpty()) {
                // Habilitar el botón "Dar de baja"
                jButton2.setEnabled(true);
            } else {
                // Deshabilitar el botón "Dar de baja"
                jButton2.setEnabled(false);
            }
        }
    });
    }


   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tipo de Mantenimiento");

        jButton1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton2.setText("Guardar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Lista de servicios"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jButton3.setText("Agregar servicio");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1888, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(100, 100, 100)
                                .addComponent(jButton1)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Obtener el tipo de servicio seleccionado en la tabla
    int filaSeleccionada = jTable1.getSelectedRow();
    if (filaSeleccionada != -1) {
        String tipoServicioSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);

        // Buscar el detalle de mantenimiento correspondiente al tipo de servicio seleccionado en la tabla
        DetalleMantenimiento detalleSeleccionado = null;
        for (DetalleMantenimiento detalle : detallemante) {
            if (detalle.getTipoServicio().equals(tipoServicioSeleccionado)) {
                detalleSeleccionado = detalle;
                break;
            }
        }

        if (detalleSeleccionado != null) {
            // Mostrar un mensaje de confirmación para asegurar que el usuario quiere seleccionar este tipo de servicio
            int opcionConfirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de seleccionar el tipo de servicio: " + detalleSeleccionado.getTipoServicio() + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (opcionConfirmacion == JOptionPane.YES_OPTION) {
                // Crear un nuevo detalle de mantenimiento
                DetalleMantenimiento nuevoDetalleMantenimiento = new DetalleMantenimiento();

                // Asignar el tipo de servicio del detalle seleccionado al nuevo detalle
                nuevoDetalleMantenimiento.setTipoServicio(detalleSeleccionado.getTipoServicio());

                // Asignar el mantenimiento realizado al nuevo detalle
                nuevoDetalleMantenimiento.setMantenimientoRealizado(this.mantenimientoRealizado); // Utiliza el mantenimientoRealizado actual

                // Guardar el nuevo detalle de mantenimiento en la base de datos
                ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
                controladoraDetalleMante.guardarTipoMantenimiento(nuevoDetalleMantenimiento);

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Detalle de mantenimiento asociado exitosamente");

                int opcion = JOptionPane.showConfirmDialog(this, "¿Desea agregar otro tipo de servicio?", "Agregar Otro Tipo de Servicio", JOptionPane.YES_NO_OPTION);
                if (opcion == JOptionPane.NO_OPTION) {
                    // Si elige "No", entonces mostrar el menú principal
                    Menu menu = new Menu(rolUsuario);
                    menu.setVisible(true);
                    dispose(); // Ocultar la ventana actual
                }
            } else {
                // Mostrar un mensaje indicando que la operación ha sido cancelada
                JOptionPane.showMessageDialog(this, "Operación cancelada.");
            }
        } else {
            // Mostrar un mensaje de error si no se encontró el detalle de mantenimiento correspondiente al tipo de servicio seleccionado
            JOptionPane.showMessageDialog(this, "No se encontró el detalle de mantenimiento correspondiente al tipo de servicio seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Mostrar un mensaje de error si no se seleccionó ninguna fila en la tabla
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un detalle de mantenimiento", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AvisoMantenimiento atras = new AvisoMantenimiento(rolUsuario);
        atras.setVisible(true);
        dispose();
            

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         // Crear un panel que contenga los campos de entrada necesarios
        JPanel panel = new JPanel();
        panel.add(new JLabel("Tipo de Servicio:"));
        JTextField tipoServicioField = new JTextField(20);
        panel.add(tipoServicioField);

        // Mostrar el JOptionPane personalizado para ingresar el tipo de servicio
        int result = JOptionPane.showConfirmDialog(this, panel, "Ingrese el Tipo de Servicio", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            String tipoServicio = tipoServicioField.getText().trim();
            if (!tipoServicio.isEmpty()) {
                // Crear una instancia de DetalleMantenimiento con el tipo de servicio
                DetalleMantenimiento detalleMantenimiento = new DetalleMantenimiento();
                detalleMantenimiento.setTipoServicio(tipoServicio);
                detalleMantenimiento.setMantenimientoRealizado(null); // MantenimientoRealizado en null

                // Guardar el detalle de mantenimiento en la base de datos
                ControladoraDetalleMante controladoraDetalleMante = new ControladoraDetalleMante();
                controladoraDetalleMante.guardarTipoMantenimiento(detalleMantenimiento);

                // Actualizar la tabla
                detallemante.add(detalleMantenimiento);
                actualizarTabla();

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Detalle de mantenimiento guardado exitosamente");
                
                
            } else {
                // Mostrar un mensaje de error si el campo está vacío
                JOptionPane.showMessageDialog(this, "Ingrese el Tipo de Servicio", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    
    }//GEN-LAST:event_jButton3ActionPerformed

   private void actualizarTabla() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("Tipo de Servicio");

    // Utilizar un conjunto para evitar duplicados
    Set<String> tiposServicioSet = new HashSet<>();

    for (DetalleMantenimiento detalle : detallemante) {
        // Verificar si el mantenimientoRealizado asociado al detalle es nulo y si el tipo de servicio no está ya en el conjunto
        if (detalle.getMantenimientoRealizado() == null && !tiposServicioSet.contains(detalle.getTipoServicio())) {
            Object[] fila = {detalle.getTipoServicio()};
            modelo.addRow(fila);
            tiposServicioSet.add(detalle.getTipoServicio());
        }
    }

    jTable1.setModel(modelo);
}
   





   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    
}